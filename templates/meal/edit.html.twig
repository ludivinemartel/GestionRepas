{% extends 'base.html.twig' %} {% block title %}Modification{% endblock %} {%
block body %}
<div class="container">
	{% include 'meal/_form.html.twig' with { 'form': form, 'title': 'Modifier le
	repas', 'button_label': 'Enregistrer' } %}

	<div class="form-section">
		<label class="label">Ingrédients existants</label>
		<ul class="list-group mt-3" id="existing-ingredient-list">
			{% for ingredient in meal.ingredients %}
			<li
				class="list-group-item d-flex justify-content-between align-items-center"
			>
				<span
					>{{ ingredient.name }} - {{ ingredient.quantity }}
					{{ ingredient.mesure }}</span
				>
				<button
					type="button"
					class="btn btn-danger btn-sm delete-ingredient-button"
					data-ingredient-id="{{ ingredient.id }}"
				>
					<i class="fas fa-trash-alt"></i>
				</button>
			</li>
			{% endfor %}
		</ul>
	</div>
</div>
{% endblock %} {% block javascripts %}
{{ parent() }}
<script>
	document.addEventListener("DOMContentLoaded", function () {
		const deleteButtons = document.querySelectorAll(
			".delete-ingredient-button"
		);

		deleteButtons.forEach((button) => {
			button.addEventListener("click", function () {
				const ingredientId = this.getAttribute("data-ingredient-id");
				const ingredientItem = this.closest("li");

				// Add hidden input to mark this ingredient for deletion
				const deleteInput = document.createElement("input");
				deleteInput.type = "hidden";
				deleteInput.name = "delete_ingredients[]";
				deleteInput.value = ingredientId;

				document.querySelector("form").appendChild(deleteInput);

				// Remove the ingredient from the list
				ingredientItem.remove();
			});
		});
	});
</script>
<!-- Le reste de votre JavaScript -->
<script>
	document.addEventListener("DOMContentLoaded", function () {
		const ingredientList = document.getElementById("ingredient-list");
		const addIngredientButton = document.getElementById(
			"add-ingredient-button"
		);
		const ingredientsDataField = document.getElementById(
			"meal_ingredients_data"
		);
		const customIngredientForm = document.getElementById(
			"custom-ingredient-form"
		);
		const toggleCustomIngredientFormButton = document.getElementById(
			"toggle-custom-ingredient-form-button"
		);
		const addCustomIngredientButton = document.getElementById(
			"add-custom-ingredient-button"
		);

		let ingredients = [];

		function updateIngredientList() {
			console.log("Updating ingredient list", ingredients);
			ingredientList.innerHTML = "";
			ingredients.forEach((ingredient, index) => {
				const li = document.createElement("li");
				li.classList.add(
					"list-group-item",
					"d-flex",
					"justify-content-between",
					"align-items-center"
				);
				li.textContent = `${ingredient.name} - ${ingredient.quantity} ${ingredient.measure}`;

				// Create delete button
				const deleteButton = document.createElement("button");
				deleteButton.classList.add("btn", "btn-danger", "btn-sm");
				deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>';
				deleteButton.addEventListener("click", function () {
					removeIngredient(index);
				});

				li.appendChild(deleteButton);
				ingredientList.appendChild(li);
			});
		}

		function removeIngredient(index) {
			ingredients.splice(index, 1);
			updateIngredientList();
		}

		addIngredientButton.addEventListener("click", function () {
			const id = document.getElementById("meal_ingredient_id").value;
			const name = document.getElementById("meal_ingredient_name_hidden").value;
			const quantity = document.getElementById(
				"meal_ingredient_quantity"
			).value;
			const measure = document.getElementById("meal_ingredient_measure").value;

			console.log("Adding ingredient:", { id, name, quantity, measure });

			if (id && name && quantity && measure) {
				ingredients.push({ id, name, quantity, measure });
				console.log("Ingredient added:", { id, name, quantity, measure });
				updateIngredientList();
				// Reset the form fields
				document.getElementById("meal_ingredient_id").value = "";
				document.getElementById("meal_ingredient_quantity").value = "";
				document.getElementById("meal_ingredient_measure").value = "";
				// Remove the selected option from Select2
				$("#meal_ingredient_name").val(null).trigger("change");
				document.getElementById("meal_ingredient_name_hidden").value = "";
				// Ensure Select2 placeholder is reset
				$("#meal_ingredient_name").empty();
			} else {
				console.log("Missing data:", { id, name, quantity, measure });
			}
		});

		toggleCustomIngredientFormButton.addEventListener("click", function () {
			customIngredientForm.style.display =
				customIngredientForm.style.display === "none" ? "block" : "none";
		});

		addCustomIngredientButton.addEventListener("click", function () {
			const name = document.getElementById("custom-ingredient-name").value;
			const kcal = document.getElementById("custom-ingredient-kcal").value;
			const protein = document.getElementById(
				"custom-ingredient-protein"
			).value;
			const fat = document.getElementById("custom-ingredient-fat").value;
			const carbohydrate = document.getElementById(
				"custom-ingredient-carbohydrate"
			).value;

			console.log("Adding custom ingredient:", {
				name,
				kcal,
				protein,
				fat,
				carbohydrate,
			});

			fetch("{{ path('ingredient_add') }}", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
					"X-Requested-With": "XMLHttpRequest",
				},
				body: JSON.stringify({ name, kcal, protein, fat, carbohydrate }),
			})
				.then((response) => response.json())
				.then((data) => {
					console.log("Response from server:", data);
					if (data.success) {
						// Reset the custom ingredient form
						document.getElementById("custom-ingredient-name").value = "";
						document.getElementById("custom-ingredient-kcal").value = "";
						document.getElementById("custom-ingredient-protein").value = "";
						document.getElementById("custom-ingredient-fat").value = "";
						document.getElementById("custom-ingredient-carbohydrate").value =
							"";
						customIngredientForm.style.display = "none";
					} else {
						alert("Erreur lors de l'ajout de l'ingrédient.");
					}
				})
				.catch((error) => {
					console.error("Error:", error);
					alert("Erreur lors de l'ajout de l'ingrédient.");
				});
		});

		// Transfer ingredients data to the hidden field before form submission
		document.querySelector("form").addEventListener("submit", function (event) {
			ingredientsDataField.value = JSON.stringify(ingredients);
			console.log(
				"Submitting form with ingredients data:",
				ingredientsDataField.value
			);

			// Check if there are ingredients added, if yes, allow submission even if Select2 is empty
			if (ingredients.length === 0) {
				event.preventDefault();
				alert(
					"Veuillez ajouter au moins un ingrédient avant de soumettre le formulaire."
				);
			}
		});

		// Initialize Select2 for ingredient_name
		$(".select2-ingredient")
			.select2({
				ajax: {
					url: ingredientSearchUrl,
					dataType: "json",
					delay: 250,
					processResults: function (data) {
						return { results: data.items };
					},
					cache: true,
				},
				minimumInputLength: 1,
			})
			.on("select2:select", function (e) {
				const data = e.params.data;
				console.log("Selected ingredient:", data);
				document.getElementById("meal_ingredient_id").value = data.id;
				document.getElementById("meal_ingredient_name_hidden").value =
					data.text;

				// Add the selected ingredient to the options to keep it visible
				const newOption = new Option(data.text, data.id, true, true);
				$("#meal_ingredient_name").append(newOption).trigger("change");
			});

		// Initialize Select2 for categories
		$(".select2-categories").select2({
			allowClear: true,
		});
	});
</script>

<!-- Téléchargement image-->
<script>
	document.addEventListener("DOMContentLoaded", function () {
		const fileInput = document.querySelector(".custom-file-input");
		const fileLabel = document.querySelector(".custom-file-label");

		if (fileInput && fileLabel) {
			fileInput.addEventListener("change", function () {
				const fileName = this.files[0]
					? this.files[0].name
					: "Choisir un fichier";
				fileLabel.textContent = fileName;
			});
		}
	});
</script>

<!-- Éditeur de texte -->
<script>
	document.addEventListener("DOMContentLoaded", function () {
		const quillElement = document.querySelector("#editor");
		if (quillElement) {
			const toolbarOptions = [
				[{ size: ["small", false, "large", "huge"] }],
				["bold", "italic", "underline"],
				[{ list: "ordered" }, { list: "bullet" }],
				[{ indent: "-1" }, { indent: "+1" }],
				[{ color: [] }, { background: [] }],
				[{ align: [] }],
			];

			const quill = new Quill(quillElement, {
				theme: "snow",
				modules: {
					toolbar: toolbarOptions,
				},
			});

			// Synchronize the hidden textarea with Quill
			quill.on("text-change", function () {
				document.querySelector('textarea[name="meal[description]"]').value =
					quill.root.innerHTML;
			});
		}
	});
</script>
{% endblock %}
