{{ form_start(form) }}

<div class="container">
    <div class="d-flex align-items-center mt-3 mb-3">
        <a href="{{ path('user_dashboard') }}" class="mr-3">
            <i class="bi bi-arrow-left-circle-fill"></i>
        </a>
        <h1 class="mb-0">{{ title }}</h1>
    </div>

    <div class="form-section">
        {{ form_widget(form.name, { attr: { placeholder: "Titre du repas" } }) }}
    </div>

    <div class="form-row">
        <!-- Colonne de gauche -->
        <div class="col-md-6">
            <div class="form-section">
                <label class="label">Nombre de personne</label>
                <div class="input-group w-50">
                    {{ form_widget(form.NbPersonne) }}
                </div>
            </div>
            <div class="form-section">
                <label class="label">Temps de préparation</label>
                <div class="input-group w-50">
                    {{ form_widget(form.time) }}
                </div>
            </div>
            <div class="form-row">
                <div class="col-md-6">
                    <div class="form-section">
                        <label class="label">Repas de la journée</label>
                        <div class="form-check">
                            {% for choice in form.daily %}
                            <div class="form-check">
                                {{
                                    form_widget(choice, {
                                        attr: { class: "form-check-input rounded-checkbox" }
                                    })
                                }}
                                {{
                                    form_label(choice, null, {
                                        attr: { class: "form-check-label" }
                                    })
                                }}
                            </div>
                            {% endfor %}
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-section">
                        <label class="label">Type de repas</label>
                        <div class="form-check">
                            {% for choice in form.MealType %}
                            <div class="form-check">
                                {{
                                    form_widget(choice, {
                                        attr: { class: "form-check-input rounded-checkbox" }
                                    })
                                }}
                                {{
                                    form_label(choice, null, {
                                        attr: { class: "form-check-label" }
                                    })
                                }}
                            </div>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-section">
                <label class="label">Liste des ingrédients</label>
                <div id="ingredient-form">
                    {{ form_widget(form.ingredient_id) }}
                    {{
                        form_widget(form.ingredient_name, {
                            attr: { class: "select2-ingredient" }
                        })
                    }}
                    <input type="hidden" id="meal_ingredient_name_hidden" />
                    <div class="form-row">
                        <div class="col-md-6 mt-3">
                            <label class="label">Quantité</label>
                            {{ form_widget(form.ingredient_quantity) }}
                        </div>
                        <div class="col-md-6 mt-3">
                            <label class="label">Mesure</label>
                            {{
                                form_widget(form.ingredient_measure, {
                                    attr: { class: "custom-select" }
                                })
                            }}
                        </div>
                    </div>

                    <div>
                        <button
                            type="button"
                            id="add-ingredient-button"
                            class="btn btn-success mt-2"
                        >
                            Ajouter
                        </button>
                    </div>
                </div>
                <ul id="ingredient-list" class="list-group mt-3"></ul>
            </div>
            <div class="form-section">
                <button
                    type="button"
                    id="toggle-custom-ingredient-form-button"
                    class="btn btn-light mt-2"
                >
                    Créer un nouvel ingrédient manuellement
                </button>
                <div id="custom-ingredient-form" style="display: none" class="mt-3">
                    <label for="custom-ingredient-name">Nom</label>
                    <input
                        type="text"
                        id="custom-ingredient-name"
                        class="form-control mb-2"
                    />
                    <label for="custom-ingredient-kcal">Kcal</label>
                    <input
                        type="number"
                        id="custom-ingredient-kcal"
                        class="form-control mb-2"
                    />
                    <label for="custom-ingredient-protein">Protéine</label>
                    <input
                        type="number"
                        id="custom-ingredient-protein"
                        class="form-control mb-2"
                    />
                    <label for="custom-ingredient-fat">Lipides</label>
                    <input
                        type="number"
                        id="custom-ingredient-fat"
                        class="form-control mb-2"
                    />
                    <label for="custom-ingredient-carbohydrate">Glucides</label>
                    <input
                        type="number"
                        id="custom-ingredient-carbohydrate"
                        class="form-control mb-2"
                    />
                    <button
                        type="button"
                        id="add-custom-ingredient-button"
                        class="btn btn-primary mt-2"
                    >
                        Enregistrer l'ingrédient
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="form-section">
        <label class="label">Tags du repas</label>
        {{
            form_widget(form.categories, {
                attr: { class: "select2-categories w-100" }
            })
        }}
    </div>

    <div class="form-row">
        <div class="col-md-6">
            <div class="form-section">
                <label class="label">Ajouter une image</label>
                <div class="custom-file">
                    {{
                        form_widget(form.imageFile, {
                            attr: { class: "custom-file-input", id: "customFile" }
                        })
                    }}
                    <label class="custom-file-label" for="customFile">Choisir un fichier</label>
                </div>
                {% if meal is defined and meal.imageName %}
                <div class="mt-3">
                    <img
                        src="{{ asset('images/meal/' ~ meal.imageName) }}"
                        alt="{{ meal.name }}"
                        class="img-fluid rounded"
                        id="preview-image"
                    />
                </div>
                {% endif %}
             
            </div>
        </div>

        <div class="col-md-6">
            <label class="label">Préparation</label>
            <div class="form-section" id="editor" style="height: 550px;">
                <!-- This is where Quill will render its content -->
            </div>
            <!-- Hidden textarea for submitting Quill content -->
            {{ form_widget(form.description, { attr: { style: "display:none;" } }) }}
        </div>
    </div>

    <div class="form-row">
        <div class="col-md-6 mt-3">
            <button
                type="button"
                class="btn btn-danger"
                id="delete-image-button"
            >
                <i class="bi bi-trash"></i> Supprimer l'image
            </button>
        </div>
        <div class="col-md-6 mt-3 text-right">
            <button class="btn btn-success">
                {{ button_label|default('Enregistrer') }}
            </button>
        </div>
    </div>

    {{ form_end(form) }}
</div>

	{% block javascripts %}
	<!-- Autocompletion du champs ingrédient et du champs tag -->
	<script>
		const ingredientSearchUrl = "{{ path('ingredient_search') }}";

		document.addEventListener("DOMContentLoaded", function () {
		    const ingredientList = document.getElementById("ingredient-list");
		    const addIngredientButton = document.getElementById("add-ingredient-button");
		    const ingredientsDataField = document.getElementById("meal_ingredients_data");
		    const customIngredientForm = document.getElementById("custom-ingredient-form");
		    const toggleCustomIngredientFormButton = document.getElementById("toggle-custom-ingredient-form-button");
		    const addCustomIngredientButton = document.getElementById("add-custom-ingredient-button");

		    let ingredients = [];

		    // Charger les ingrédients existants depuis une variable Twig s'ils existent
		    {% if existingIngredients is defined %}
		    const existingIngredients = JSON.parse('{{ existingIngredients|escape('js') }}');
		    if (existingIngredients.length > 0) {
		        ingredients = existingIngredients;
		        updateIngredientList();
		    }
		    {% endif %}

		    function updateIngredientList() {
		        console.log("Updating ingredient list", ingredients);
		        ingredientList.innerHTML = "";
		        ingredients.forEach((ingredient, index) => {
		            const li = document.createElement("li");
		            li.classList.add(
		                "list-group-item",
		                "d-flex",
		                "justify-content-between",
		                "align-items-center"
		            );
		            li.textContent = `${ingredient.name} - ${ingredient.quantity} ${ingredient.measure}`;

		            // Create delete button
		            const deleteButton = document.createElement("button");
		            deleteButton.classList.add("btn", "btn-danger", "btn-sm");
		            deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>';
		            deleteButton.addEventListener("click", function () {
		                removeIngredient(index);
		            });

		            li.appendChild(deleteButton);
		            ingredientList.appendChild(li);
		        });
		    }

		    function removeIngredient(index) {
		        ingredients.splice(index, 1);
		        updateIngredientList();
		    }

		    addIngredientButton.addEventListener("click", function () {
		        const id = document.getElementById("meal_ingredient_id").value;
		        const name = document.getElementById("meal_ingredient_name_hidden").value;
		        const quantity = document.getElementById("meal_ingredient_quantity").value;
		        const measure = document.getElementById("meal_ingredient_measure").value;

		        console.log("Adding ingredient:", { id, name, quantity, measure });

		        if (id && name && quantity && measure) {
		            // Vérifier si l'ingrédient existe déjà pour le modifier ou l'ajouter
		            const existingIndex = ingredients.findIndex(ingredient => ingredient.id === id);
		            if (existingIndex > -1) {
		                ingredients[existingIndex] = { id, name, quantity, measure };
		            } else {
		                ingredients.push({ id, name, quantity, measure });
		            }
		            console.log("Ingredient added or updated:", { id, name, quantity, measure });
		            updateIngredientList();
		            // Reset the form fields
		            document.getElementById("meal_ingredient_id").value = "";
		            document.getElementById("meal_ingredient_quantity").value = "";
		            document.getElementById("meal_ingredient_measure").value = "";
		            // Remove the selected option from Select2
		            $("#meal_ingredient_name").val(null).trigger("change");
		            document.getElementById("meal_ingredient_name_hidden").value = "";
		            // Ensure Select2 placeholder is reset
		            $("#meal_ingredient_name").empty();
		        } else {
		            console.log("Missing data:", { id, name, quantity, measure });
		        }
		    });

		    toggleCustomIngredientFormButton.addEventListener("click", function () {
		        customIngredientForm.style.display =
		            customIngredientForm.style.display === "none" ? "block" : "none";
		    });

		    addCustomIngredientButton.addEventListener("click", function () {
		        const name = document.getElementById("custom-ingredient-name").value;
		        const kcal = document.getElementById("custom-ingredient-kcal").value;
		        const protein = document.getElementById("custom-ingredient-protein").value;
		        const fat = document.getElementById("custom-ingredient-fat").value;
		        const carbohydrate = document.getElementById("custom-ingredient-carbohydrate").value;

		        console.log("Adding custom ingredient:", {
		            name,
		            kcal,
		            protein,
		            fat,
		            carbohydrate,
		        });

		        fetch("{{ path('ingredient_add') }}", {
		            method: "POST",
		            headers: {
		                "Content-Type": "application/json",
		                "X-Requested-With": "XMLHttpRequest",
		            },
		            body: JSON.stringify({ name, kcal, protein, fat, carbohydrate }),
		        })
		        .then((response) => response.json())
		        .then((data) => {
		            console.log("Response from server:", data);
		            if (data.success) {
		                // Reset the custom ingredient form
		                document.getElementById("custom-ingredient-name").value = "";
		                document.getElementById("custom-ingredient-kcal").value = "";
		                document.getElementById("custom-ingredient-protein").value = "";
		                document.getElementById("custom-ingredient-fat").value = "";
		                document.getElementById("custom-ingredient-carbohydrate").value = "";
		                customIngredientForm.style.display = "none";
		            } else {
		                alert("Erreur lors de l'ajout de l'ingrédient.");
		            }
		        })
		        .catch((error) => {
		            console.error("Error:", error);
		            alert("Erreur lors de l'ajout de l'ingrédient.");
		        });
		    });

		    // Transfer ingredients data to the hidden field before form submission
		    document.querySelector("form").addEventListener("submit", function (event) {
		        ingredientsDataField.value = JSON.stringify(ingredients);
		        console.log(
		            "Submitting form with ingredients data:",
		            ingredientsDataField.value
		        );

		        // Check if there are ingredients added, if yes, allow submission even if Select2 is empty
		        if (ingredients.length === 0) {
		            event.preventDefault();
		            alert(
		                "Veuillez ajouter au moins un ingrédient avant de soumettre le formulaire."
		            );
		        }
		    });

		    // Initialize Select2 for ingredient_name
		    $(".select2-ingredient")
		        .select2({
		            ajax: {
		                url: ingredientSearchUrl,
		                dataType: "json",
		                delay: 250,
		                processResults: function (data) {
		                    return { results: data.items };
		                },
		                cache: true,
		            },
		            minimumInputLength: 1,
		        })
		        .on("select2:select", function (e) {
		            const data = e.params.data;
		            console.log("Selected ingredient:", data);
		            document.getElementById("meal_ingredient_id").value = data.id;
		            document.getElementById("meal_ingredient_name_hidden").value = data.text;

		            // Add the selected ingredient to the options to keep it visible
		            const newOption = new Option(data.text, data.id, true, true);
		            $("#meal_ingredient_name").append(newOption).trigger("change");
		        });

		    // Initialize Select2 for categories
		    $(".select2-categories").select2({
		        allowClear: true,
		    });
		});
	</script>

	<!-- Téléchargement image -->
	<script>
		document.addEventListener("DOMContentLoaded", function () {
			const fileInput = document.querySelector(".custom-file-input");
			const fileLabel = document.querySelector(".custom-file-label");
			const deleteImageButton = document.querySelector("#delete-image-button");
			const form = document.querySelector("form");
			let deleteField;

			if (fileInput && fileLabel) {
				fileInput.addEventListener("change", function () {
					const file = this.files[0];
					if (file) {
						const reader = new FileReader();
						reader.onload = function (e) {
							const previewImage = document.querySelector("#preview-image");
							if (previewImage) {
								previewImage.src = e.target.result;
								previewImage.style.display = "block";
							} else {
								const img = document.createElement("img");
								img.id = "preview-image";
								img.src = e.target.result;
								img.classList.add("img-fluid", "rounded");
								fileInput.parentNode.appendChild(img);
							}
						};
						reader.readAsDataURL(file);
						fileLabel.textContent = file.name;

						// Si une nouvelle image est sélectionnée, enlever le champ de suppression
						if (deleteField) {
							deleteField.remove();
							deleteField = null;
						}
					} else {
						fileLabel.textContent = "Choisir un fichier";
						const previewImage = document.querySelector("#preview-image");
						if (previewImage) {
							previewImage.style.display = "none";
						}
					}
				});
			}

			if (deleteImageButton) {
				deleteImageButton.addEventListener("click", function () {
					// Masquer l'image actuelle
					const previewImage = document.querySelector("#preview-image");
					if (previewImage) {
						previewImage.style.display = "none";
					}
					// Vider le champ de fichier
					if (fileInput) {
						fileInput.value = "";
						fileLabel.textContent = "Choisir un fichier";
					}
					// Ajouter un champ caché pour indiquer la suppression de l'image
					if (!deleteField) {
						deleteField = document.createElement("input");
						deleteField.setAttribute("type", "hidden");
						deleteField.setAttribute("name", "delete_image");
						deleteField.setAttribute("value", "1");
						form.appendChild(deleteField);
					}
				});
			}
		});
	</script>

	<!-- Éditeur de texte -->
	<script>
		document.addEventListener("DOMContentLoaded", function () {
		    const quillElement = document.querySelector("#editor");
		    if (quillElement) {
		        const toolbarOptions = [
		            [{ size: ["small", false, "large", "huge"] }],
		            ["bold", "italic", "underline"],
		            [{ list: "ordered" }, { list: "bullet" }],
		            [{ indent: "-1" }, { indent: "+1" }],
		            [{ color: [] }, { background: [] }],
		            [{ align: [] }],
		        ];

		        const quill = new Quill(quillElement, {
		            theme: "snow",
		            modules: {
		                toolbar: toolbarOptions,
		            },
		        });

		        // Set the initial content from the server
		        const initialContent = {{ description|default('')|json_encode|raw }};
		        quill.clipboard.dangerouslyPasteHTML(initialContent);

		        // Synchronize the hidden textarea with Quill
		        quill.on("text-change", function () {
		            const textarea = document.querySelector('textarea[name="meal[description]"]');
		            if (textarea) {
		                textarea.value = quill.root.innerHTML;
		            }
		        });
		    }
		});
	</script>
	{% endblock %}
</div>
