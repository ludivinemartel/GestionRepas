{% extends 'base.html.twig' %}

{% block title %}Mon stock{% endblock %}

{% block body %}
<div class="container" id="masonry-container">
    <div class="d-flex align-items-center mt-3 mb-3">
        <a href="{{ path('user_dashboard') }}" class="mr-3">
            <i class="bi bi-arrow-left-circle-fill"></i>
        </a>
        <h1>Mon stock</h1>
    </div>

    <a href="{{ path('app_pantry_item_new') }}" class="btn btn-success mb-4">Ajouter au stock</a>

    <div class="masonry">
        {% for category in selected_categories %}
            <div class="masonry-item mb-4" data-category="{{ category }}">
                <div class="card mb-3">
                    <div class="card-header">
                        <h3>{{ category }}</h3>
                    </div>
                    <div class="card-body">
                        {% set items = pantry_items | filter(item => item.getType() == category) %}
                        {% if items | length > 0 %}
                            {% for pantry_item in items %}
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <label class="form-label mb-0" for="item-{{ pantry_item.id }}">
                                        {{ pantry_item.name }}
                                    </label>
                                    <div class="d-flex align-items-center">
                                        <form method="post" action="{{ path('app_pantry_item_update', { id: pantry_item.id }) }}" class="mb-0 mr-2">
                                            <select name="InStock" class="form-select" onchange="this.form.submit()">
                                                <option value="">Select status</option>
                                                <option value="1" class="in-stock-option" {% if pantry_item.isInStock() == true %}selected{% endif %}>En stock</option>
                                                <option value="0" class="out-of-stock-option" {% if pantry_item.isInStock() == false %}selected{% endif %}>A acheter</option>
                                                <option value="" class="neutral-option" {% if pantry_item.isInStock() is null %}selected{% endif %}>Neutre</option>
                                            </select>
                                            <input type="hidden" name="_token" value="{{ csrf_token('update' ~ pantry_item.id) }}">
                                        </form>
                                        <form method="post" action="{{ path('app_pantry_item_delete', { id: pantry_item.id }) }}" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer cet article ?');" class="mb-0">
                                            <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ pantry_item.id) }}">
                                            <button class="btn btn-danger btn-sm"><i class="bi bi-trash"></i></button>
                                        </form>
                                    </div>
                                </div>
                            {% endfor %}
                        {% else %}
                            <p>Pas d'articles {{ category | lower }} trouvés</p>
                        {% endif %}
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const container = document.querySelector(".masonry");

        Sortable.create(container, {
            animation: 150,
            onEnd: function (evt) {
                const items = container.querySelectorAll(".masonry-item");
                let order = [];
                items.forEach((item, index) => {
                    order.push({
                        category: item.getAttribute("data-category"),
                        position: index + 1,
                    });
                });

                // Envoi de la nouvelle disposition au serveur
                fetch("{{ path('app_update_order') }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRF-TOKEN": "{{ csrf_token('update-order') }}",
                    },
                    body: JSON.stringify({ order }),
                });
            },
        });
    });
</script>
{% endblock %}
